#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir> <env-dir>
set -e

# Parse params
BUILD_DIR=$1
CACHE_DIR=$2
ENV_DIR=$3

# Default version
version="5.2.1"

# Read version from configured JEMALLOC_VERSION
if [ -f $ENV_DIR/JEMALLOC_VERSION ]; then
  version=$(cat $ENV_DIR/JEMALLOC_VERSION)
fi

# dest is the path in the application that jemalloc will be extracted to.
dest="$BUILD_DIR/vendor/jemalloc"

# bundle is the full path to the cached jemalloc binaries for this version.
bundle=$CACHE_DIR/jemalloc/$version

# cached checks to see if there is a compatible version in the cache.
function cached() {
  # Returns false when there is no matching version in the cache.
  if [[ ! -d $bundle ]]; then
    return 1
  fi

  if [ -f "$bundle/.stack" ]; then
    CACHED_STACK=$(cat $bundle/.stack)
  fi

  # True when the downloaded version in the cache is for the same stack as the
  # compiling dyno. CACHED_STACK will be empty when the .stack file is missing
  # which also forces a fresh download.
  [[ $CACHED_STACK == $STACK ]]
}

function download_jemalloc() {
  url="https://github.com/usemast/heroku-buildpack-jemalloc/releases/download/$STACK/jemalloc-$version.tar.bz2"

  # Disable exit on command failure so we can provide better error messages
  set +e

  echo "       jemalloc: Fetching $url"
  status=$(curl -sL -f  -w "%{http_code}" -o /tmp/jemalloc.tar.bz2 $url)

  if [[ $status -ge 300 ]]; then
    echo " !     jemalloc: Server returned HTTP $status"
    exit 1
  fi

  # Reenable exit on failure
  set -e

  mkdir -p $bundle
  tar -xj -f /tmp/jemalloc.tar.bz2 -C $bundle

  # Store the stack version (e.g. heroku-20) that was downloaded to force a
  # redownload should the stack change.
  echo "$STACK" > "$bundle/.stack"
}

echo "-----> jemalloc: Vendoring $version"

# Check if this version of jemalloc is in the cache and download it if it
# doesn't exist.
if ! cached; then
  download_jemalloc
fi

mkdir -p $dest
cp -r $bundle -T $dest/

echo "-----> jemalloc: Building runtime environment"
mkdir -p $BUILD_DIR/.profile.d

cat <<'EOF' > $BUILD_DIR/.profile.d/jemalloc.sh
export PATH="$PATH:/app/vendor/jemalloc/bin"

# Configure LD_PRELOAD when JEMALLOC_ENABLED is set to "true". Setting this can
# be tricky for people and it occasionally changes with new versions.
if [ "$JEMALLOC_ENABLED" = 'true' ]; then
  export LD_PRELOAD="/app/vendor/jemalloc/lib/libjemalloc.so $LD_PRELOAD"
fi
EOF
